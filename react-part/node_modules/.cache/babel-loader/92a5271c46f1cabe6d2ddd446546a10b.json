{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/mnt/c/Users/yavit/OneDrive/Desktop/EquityEcho/proreplica/proreplica_react/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nfunction round(method, number, precision) {\n  if (typeof number !== 'number') {\n    throw new TypeError('Expected value to be a number');\n  }\n\n  if (!Number.isInteger(precision)) {\n    throw new TypeError('Expected precision to be an integer');\n  }\n\n  const isRoundingAndNegative = method === 'round' && number < 0;\n\n  if (isRoundingAndNegative) {\n    number = Math.abs(number);\n  }\n\n  let exponent;\n\n  var _$split = \"\".concat(number, \"e\").split('e');\n\n  var _$split2 = _slicedToArray(_$split, 2);\n\n  number = _$split2[0];\n  exponent = _$split2[1];\n  let result = Math[method](\"\".concat(number, \"e\").concat(Number(exponent) + precision));\n\n  var _$split3 = \"\".concat(result, \"e\").split('e');\n\n  var _$split4 = _slicedToArray(_$split3, 2);\n\n  number = _$split4[0];\n  exponent = _$split4[1];\n  result = Number(\"\".concat(number, \"e\").concat(Number(exponent) - precision));\n\n  if (isRoundingAndNegative) {\n    result = -result;\n  }\n\n  return result;\n}\n\nmodule.exports = round.bind(null, 'round');\nmodule.exports.up = round.bind(null, 'ceil');\nmodule.exports.down = round.bind(null, 'floor');","map":null,"metadata":{},"sourceType":"script"}