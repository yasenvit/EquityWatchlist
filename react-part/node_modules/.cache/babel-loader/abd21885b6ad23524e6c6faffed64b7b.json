{"ast":null,"code":"import _objectSpread from \"/mnt/c/Users/yavit/OneDrive/Desktop/EquityEcho/WatchlistFundamentals/react-part/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/mnt/c/Users/yavit/OneDrive/Desktop/EquityEcho/WatchlistFundamentals/react-part/src/util/SelectItem.js\";\nimport React, { Component } from 'react';\nimport Select, { components } from 'react-select';\nimport apiCall from './apiCall';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nconst customStyles = {\n  control: (base, state) => _objectSpread({}, base, {\n    fontFamily: 'Times New Roman',\n    fontSize: 18,\n    border: state.isFocused ? 0 : 0,\n    boxShadow: state.isFocused ? 0 : 0,\n    cursor: 'text',\n    borderRadius: 0,\n    borderBottom: 'solid 1px'\n  }),\n  option: (styles, {\n    isFocused\n  }) => {\n    return _objectSpread({}, styles, {\n      cursor: 'pointer',\n      backgroundColor: isFocused ? 'white' : 'white',\n      color: isFocused ? 'rgba(255, 80, 86)' : 'black',\n      lineHeight: 2\n    });\n  },\n  input: styles => _objectSpread({}, styles, {\n    color: 'black',\n    fontFamily: 'Times New Roman, Times, Serif'\n  }),\n  menu: styles => _objectSpread({}, styles, {\n    marginTop: 0,\n    boxShadow: 'none',\n    borderRadius: 0\n  }),\n  singleValue: styles => _objectSpread({}, styles, {\n    color: 'rgba(255, 80, 86)'\n  })\n};\nexport default class SelectItem extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedOption: null,\n      options: []\n    };\n\n    this.handleChange = selectedOption => {\n      this.setState({\n        selectedOption\n      });\n      console.log(\"Option selected:\", selectedOption);\n      this.props.pickHandle ? this.props.pickHandle(selectedOption.value) : this.props.addSymbol ? this.props.addSymbol(selectedOption.value) : null;\n    };\n  }\n\n  getStocksList() {\n    console.log(\"getStocksList function running\");\n    const endpoint = \"/api/stocks/all\";\n    const promise = apiCall(endpoint, 'get');\n    promise.then(blob => blob.json()).then(json => {\n      this.setState({\n        options: json.selectSymbols\n      });\n    });\n  }\n\n  componentDidMount() {\n    if (this.state.options && this.state.options.length === 0) {\n      this.getStocksList();\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"=>selectedoption has been unmounted<=\");\n    this.setState({\n      selectedOption: null\n    });\n  }\n\n  render() {\n    console.log(\"addsymbol\", this.props.addSymbol);\n    console.log(\"PICKHANDLE\", this.props.pickHandle);\n    const _this$state = this.state,\n          selectedOption = _this$state.selectedOption,\n          options = _this$state.options;\n\n    const DropdownIndicator = props => {\n      return components.DropdownIndicator && React.createElement(components.DropdownIndicator, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(FontAwesomeIcon, {\n        icon: faSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }));\n    };\n\n    return React.createElement(Select, {\n      value: selectedOption,\n      onChange: this.handleChange,\n      placeholder: \"Quote lookup\",\n      options: options,\n      styles: customStyles,\n      openMenuOnClick: false,\n      classNamePrefix: \"select\",\n      styles: customStyles,\n      components: {\n        DropdownIndicator\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/mnt/c/Users/yavit/OneDrive/Desktop/EquityEcho/WatchlistFundamentals/react-part/src/util/SelectItem.js"],"names":["React","Component","Select","components","apiCall","FontAwesomeIcon","faSearch","customStyles","control","base","state","fontFamily","fontSize","border","isFocused","boxShadow","cursor","borderRadius","borderBottom","option","styles","backgroundColor","color","lineHeight","input","menu","marginTop","singleValue","SelectItem","selectedOption","options","handleChange","setState","console","log","props","pickHandle","value","addSymbol","getStocksList","endpoint","promise","then","blob","json","selectSymbols","componentDidMount","length","componentWillUnmount","render","DropdownIndicator"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Select, { components } from 'react-select';\r\nimport apiCall from './apiCall';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n\r\nconst customStyles = {\r\n  control: (base, state) => ({\r\n    ...base,\r\n    fontFamily: 'Times New Roman',\r\n    fontSize: 18,\r\n    border: state.isFocused ? 0 : 0,\r\n    boxShadow: state.isFocused ? 0 : 0,\r\n    cursor: 'text',\r\n    borderRadius: 0,\r\n    borderBottom: 'solid 1px',\r\n  }),\r\n\r\n  option: (styles, { isFocused }) => {\r\n    return {\r\n      ...styles,\r\n      cursor: 'pointer',\r\n      backgroundColor: isFocused ? 'white' : 'white',\r\n      color: isFocused ? 'rgba(255, 80, 86)' : 'black',\r\n      lineHeight: 2,\r\n    }\r\n  },\r\n\r\n  input: styles => ({\r\n    ...styles,\r\n    color: 'black',\r\n    fontFamily: 'Times New Roman, Times, Serif',\r\n  }),\r\n\r\n  menu: styles => ({\r\n    ...styles,\r\n    marginTop: 0,\r\n    boxShadow: 'none',\r\n    borderRadius: 0,\r\n  }),\r\n\r\n  singleValue: styles => ({\r\n    ...styles,\r\n    color: 'rgba(255, 80, 86)',\r\n  }),\r\n}\r\nexport default class SelectItem extends Component {\r\n\r\n  state = {\r\n    selectedOption: null,\r\n    options:[]\r\n  };\r\n\r\n  getStocksList() {\r\n    console.log(\"getStocksList function running\")\r\n    const endpoint = `/api/stocks/all`\r\n    const promise = apiCall(endpoint,'get')\r\n    promise.then(blob => blob.json()).then(json => {\r\n      this.setState({\r\n        options: json.selectSymbols\r\n      })\r\n    })\r\n  }\r\n\r\n    handleChange = (selectedOption) => {\r\n      this.setState({ selectedOption });\r\n      console.log(`Option selected:`, selectedOption);\r\n      this.props.pickHandle?this.props.pickHandle(selectedOption.value):this.props.addSymbol?this.props.addSymbol(selectedOption.value):null};\r\n\r\n    componentDidMount() {\r\n\r\n      if(this.state.options && this.state.options.length===0) {\r\n        this.getStocksList()\r\n      }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n      console.log(\"=>selectedoption has been unmounted<=\")\r\n      this.setState({selectedOption:null})\r\n    }\r\n    render() {\r\n      console.log(\"addsymbol\", this.props.addSymbol)\r\n      console.log(\"PICKHANDLE\", this.props.pickHandle)\r\n      const { selectedOption, options } = this.state;\r\n \r\n      \r\n      const DropdownIndicator = props => {\r\n        return(\r\n         components.DropdownIndicator && (\r\n           <components.DropdownIndicator {...props}>\r\n             <FontAwesomeIcon icon={faSearch} />\r\n           </components.DropdownIndicator>\r\n         )\r\n        )\r\n       }\r\n   \r\n      return (\r\n        <Select\r\n          value={selectedOption}\r\n          onChange={this.handleChange}\r\n          placeholder= \"Quote lookup\"\r\n          options={options}\r\n          styles={customStyles}\r\n          openMenuOnClick={false}\r\n    \r\n    classNamePrefix= \"select\"\r\n    styles={customStyles}\r\n    \r\n    components={ {DropdownIndicator} }\r\n    \r\n        />\r\n      );\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}