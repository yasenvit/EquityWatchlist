{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/yavit/OneDrive/Desktop/finProject/proreplica/proreplica_react/src/quoteGrid/Quotes.js\";\nimport React, { Component } from 'react';\nimport apiCall from '../util/apiCall';\nimport '../styles/table.css';\nimport QuoteItem from './QuoteItem';\nexport default class Quotes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeQuotes: null,\n      activeTickers: [],\n      error: \"\"\n    };\n  }\n\n  checkList() {\n    console.log(\"Quotes checkList\");\n    const endpoint = \"/api/active/list\";\n    const promise = apiCall(endpoint, 'get');\n    promise.then(blob => blob.json()).then(json => {\n      this.setState({\n        activeTickers: json.symbols\n      });\n    });\n  }\n\n  getQuotes(symbols) {\n    console.log(\"Quotes getQuotes\");\n    const activeTickers = symbols.join();\n    const endpoint = \"/api/list/\".concat(activeTickers, \"/quote\");\n    const promise = apiCall(endpoint, 'get');\n    promise.then(blob => blob.json()).then(json => {\n      this.setState({\n        activeQuotes: json.quotes\n      });\n    });\n  }\n\n  componentWillMount() {\n    console.log(\"QUOTES componentWillMount\");\n    this.checkList();\n    this.getQuotes(this.props.activeTickers);\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(\"QUOTES componentDidUpdate\");\n\n    if (this.props.activeTickers !== prevProps.activeTickers) {\n      this.setState({\n        activeTickers: this.props.activeTickers\n      });\n      this.getQuotes(this.props.activeTickers);\n    } else if (this.state.activeQuotes === null && this.state.activeTickers || this.state.activeQuotes === undefined && this.state.activeTickers) {\n      this.getQuotes(this.state.activeTickers);\n    }\n  }\n\n  render() {\n    console.log(\"QUOTES RENDER\");\n    console.log(\"state activequotes\");\n    console.log(this.state.activeQuotes);\n    console.log(\"QUOTES RENDER END\");\n    let outp = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    });\n\n    if (this.state.activeQuotes === null || this.state.activeQuotes === undefined) {\n      outp = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    } else {\n      outp = React.createElement(QuoteItem, {\n        setChartsTicker: this.props.setChartsTicker,\n        items: this.state.activeQuotes,\n        delSymbol: this.props.delSymbol,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"latestPrice\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"open\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"close\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"high\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"low\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"latestVolume\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"change\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"changePercent\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"marketCap\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"peRatio\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"week52High\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"week52Low\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"ytdChange\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, outp));\n  }\n\n}\n/*\r\nshouldComponentUpdate(nextProps, nextState) {\r\nlet shouldUpdate = this.props.activeQuotes !== nextProps.activeQuotes;\r\nreturn shouldUpdate;\r\n}\r\n\nstatic getDerivedStateFromProps(nextProps, prevState) {\r\n  console.log('----derivedStateFromProps-----')\r\n  if(nextProps.activeQuotes && \r\n    prevState.activeQuotes !== nextProps.activeQuotes) {\r\n    return {\r\n      activeQuotes : nextProps.activeQuotes\r\n    }\r\n  }\r\nreturn null\r\n};\r\n   componentWillUpdate(){\r\n  this.getQuotes(this.props.activeQuotes)\r\n}\r\n  componentDidUpdate(prevProps) {\r\n  console.log(\"DID - UPDATE\")\r\n  if(prevProps.activeQuotes !== this.props.activeQuotes) {\r\n    this.getQuotes(this.state.activeQuotes);\r\n  } \r\n}\r\n\ncomponentDidMount() {\r\n   console.log(\"DID MOUNT\")\r\n   this.getQuotes(this.props.activeQuotes)\r\n }\r\n*/","map":{"version":3,"sources":["/mnt/c/Users/yavit/OneDrive/Desktop/finProject/proreplica/proreplica_react/src/quoteGrid/Quotes.js"],"names":["React","Component","apiCall","QuoteItem","Quotes","constructor","props","state","activeQuotes","activeTickers","error","checkList","console","log","endpoint","promise","then","blob","json","setState","symbols","getQuotes","join","quotes","componentWillMount","componentDidUpdate","prevProps","undefined","render","outp","setChartsTicker","delSymbol"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport apiCall from '../util/apiCall';\r\nimport '../styles/table.css';\r\nimport QuoteItem from './QuoteItem'\r\n\r\nexport default class Quotes extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeQuotes: null,\r\n      activeTickers : [],\r\n      error: \"\"\r\n    };\r\n\r\n  }\r\n  checkList() {\r\n    console.log(\"Quotes checkList\")\r\n    const endpoint = `/api/active/list`\r\n    const promise = apiCall(endpoint,'get')\r\n    promise.then(blob => blob.json()).then(json => {\r\n      this.setState({\r\n        activeTickers: json.symbols\r\n      })\r\n    })\r\n  }\r\n  getQuotes (symbols) {\r\n    console.log(\"Quotes getQuotes\")\r\n    const activeTickers = symbols.join()\r\n    const endpoint = `/api/list/${activeTickers}/quote`\r\n    const promise = apiCall(endpoint,'get')\r\n    promise.then(blob => blob.json()).then (json=> {\r\n      this.setState({\r\n        activeQuotes: json.quotes\r\n      })\r\n    })\r\n  }\r\n\r\n  componentWillMount() {\r\n    console.log(\"QUOTES componentWillMount\")\r\n    this.checkList();\r\n    this.getQuotes(this.props.activeTickers);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    console.log(\"QUOTES componentDidUpdate\")\r\n    if(this.props.activeTickers !== prevProps.activeTickers) {\r\n      this.setState({activeTickers : this.props.activeTickers})\r\n      this.getQuotes(this.props.activeTickers);\r\n    } \r\n    else if(this.state.activeQuotes === null && this.state.activeTickers || this.state.activeQuotes === undefined && this.state.activeTickers) {\r\n      this.getQuotes(this.state.activeTickers)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(\"QUOTES RENDER\")\r\n    console.log(\"state activequotes\")\r\n    console.log(this.state.activeQuotes)\r\n    console.log(\"QUOTES RENDER END\")\r\n    \r\n    let outp = (<div></div>)\r\n    if(this.state.activeQuotes === null || this.state.activeQuotes === undefined) {\r\n      outp = (<div></div>)\r\n    } else {\r\n      outp = (\r\n        <QuoteItem setChartsTicker={this.props.setChartsTicker} items = {this.state.activeQuotes} delSymbol = {this.props.delSymbol}/>\r\n      )\r\n    }\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th></th>\r\n            <th>latestPrice</th>\r\n            <th>open</th>\r\n            <th>close</th>\r\n            <th>high</th>\r\n            <th>low</th>\r\n            <th>latestVolume</th>\r\n            <th>change</th>\r\n            <th>changePercent</th>\r\n            <th>marketCap</th>\r\n            <th>peRatio</th>\r\n            <th>week52High</th>\r\n            <th>week52Low</th>\r\n            <th>ytdChange</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {outp}\r\n        </tbody>\r\n      </table>\r\n    )\r\n   }\r\n  }\r\n\r\n  /*\r\nshouldComponentUpdate(nextProps, nextState) {\r\n  let shouldUpdate = this.props.activeQuotes !== nextProps.activeQuotes;\r\n  return shouldUpdate;\r\n}\r\n \r\nstatic getDerivedStateFromProps(nextProps, prevState) {\r\n    console.log('----derivedStateFromProps-----')\r\n    if(nextProps.activeQuotes && \r\n      prevState.activeQuotes !== nextProps.activeQuotes) {\r\n      return {\r\n        activeQuotes : nextProps.activeQuotes\r\n      }\r\n    }\r\n  return null\r\n  };\r\n\r\n   componentWillUpdate(){\r\n    this.getQuotes(this.props.activeQuotes)\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    console.log(\"DID - UPDATE\")\r\n    if(prevProps.activeQuotes !== this.props.activeQuotes) {\r\n      this.getQuotes(this.state.activeQuotes);\r\n    } \r\n  }\r\n \r\n  componentDidMount() {\r\n     console.log(\"DID MOUNT\")\r\n     this.getQuotes(this.props.activeQuotes)\r\n   }\r\n*/"]},"metadata":{},"sourceType":"module"}