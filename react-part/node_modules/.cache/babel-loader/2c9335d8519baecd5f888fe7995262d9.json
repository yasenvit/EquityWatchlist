{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/yavit/OneDrive/Desktop/EquityEcho/proreplica/proreplica_react/src/components/Quotes.js\";\nimport React, { Component } from 'react';\nimport apiCall from '../util/apiCall';\nimport QuoteSheet from './QuoteSheet';\nexport default class Quotes extends Component {\n  constructor(props) {\n    super(props);\n\n    this.delSymbol = symbol => {\n      console.log(\"QUOTESdeleting\", symbol);\n      const endpoint = \"/api/active/delete/\".concat(symbol);\n      const promise = apiCall(endpoint, 'get');\n      promise.then(blob => blob.json()).then(json => {\n        this.setState({\n          activeTickers: json.symbols\n        });\n      });\n    };\n\n    this.state = {\n      activeQuotes: [],\n      activeTickers: [],\n      error: \"\"\n    };\n    this.checkList();\n  }\n\n  checkList() {\n    console.log(\"checking function running\");\n    const endpoint = \"/api/active/list\";\n    const promise = apiCall(endpoint, 'get');\n    promise.then(blob => blob.json()).then(json => {\n      this.setState({\n        activeTickers: json.symbols\n      });\n    });\n  }\n\n  getQuotes(symbols) {\n    console.log(\"getQuotes running\");\n    const activeTickers = symbols.join();\n    const endpoint = \"/api/list/\".concat(activeTickers, \"/quote\");\n    const promise = apiCall(endpoint, 'get');\n    promise.then(blob => blob.json()).then(json => {\n      this.setState({\n        activeQuotes: json.quotes\n      });\n    });\n  }\n\n  addSymbol(symbol) {\n    const endpoint = \"/api/active/add/\".concat(symbol);\n    const promise = apiCall(endpoint, 'get');\n    promise.then(blob => blob.json()).then(json => {\n      if (json.error.length > 0) {\n        alert(json.error);\n      } else {\n        this.setState({\n          activeTickers: json.symbols\n        });\n      }\n    });\n  }\n\n  componentDidUpdate(prevState) {\n    console.log(\"componentDID running\");\n\n    if (!this.state.activeQuotes && this.state.activeTickers) {\n      this.getQuotes(this.state.activeTickers);\n    }\n  }\n\n  render() {\n    console.log(\"tickers====\", this.state.activeTickers);\n    let dummydata = [{\n      \"symbol\": \"AAPL\",\n      \"latestPrice\": 201.24,\n      \"marketCap\": 925921339200,\n      \"avgTotalVolume\": 24728097,\n      \"peRatio\": 16.78,\n      \"open\": 199.05,\n      \"close\": 201.24,\n      \"low\": 198.81,\n      \"high\": 201.51,\n      \"week52Low\": 142,\n      \"week52High\": 233.47,\n      \"change\": 1.22,\n      \"changePercent\": 0.0061,\n      \"ytdChange\": 0.272691\n    }, {\n      \"symbol\": \"TSLA\",\n      \"latestPrice\": 199,\n      \"marketCap\": 925921339199,\n      \"avgTotalVolume\": 24728097,\n      \"peRatio\": 16.78,\n      \"open\": 199.05,\n      \"close\": 201.24,\n      \"low\": 198.81,\n      \"high\": 201.51,\n      \"week52Low\": 142,\n      \"week52High\": 233.47,\n      \"change\": 1.22,\n      \"changePercent\": 0.0061,\n      \"ytdChange\": 0.272691\n    }];\n    let output = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    });\n\n    if (this.state.activeQuotes) {\n      output = React.createElement(QuoteSheet, {\n        data: dummydata,\n        addSymbol: this.addSymbol,\n        delSymbol: this.delSymbol,\n        activeTickers: this.state.activeTickers,\n        activeQuotes: this.state.activeQuotes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      });\n    } else {\n      output = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, output);\n  }\n\n}","map":{"version":3,"sources":["/mnt/c/Users/yavit/OneDrive/Desktop/EquityEcho/proreplica/proreplica_react/src/components/Quotes.js"],"names":["React","Component","apiCall","QuoteSheet","Quotes","constructor","props","delSymbol","symbol","console","log","endpoint","promise","then","blob","json","setState","activeTickers","symbols","state","activeQuotes","error","checkList","getQuotes","join","quotes","addSymbol","length","alert","componentDidUpdate","prevState","render","dummydata","output"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport apiCall from '../util/apiCall';\r\nimport QuoteSheet from './QuoteSheet'\r\n\r\n\r\nexport default class Quotes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          activeQuotes: [],\r\n          activeTickers : [],\r\n          error: \"\"\r\n        };\r\n        this.checkList()\r\n      }\r\n\r\n    checkList() {\r\n      console.log(\"checking function running\")\r\n        const endpoint = `/api/active/list`\r\n        const promise = apiCall(endpoint,'get')\r\n        promise.then(blob => blob.json()).then(json => {\r\n          this.setState({\r\n            activeTickers: json.symbols\r\n          })\r\n        })\r\n      }\r\n    getQuotes (symbols) {\r\n        console.log(\"getQuotes running\")\r\n        const activeTickers = symbols.join()\r\n        const endpoint = `/api/list/${activeTickers}/quote`\r\n        const promise = apiCall(endpoint,'get')\r\n        promise.then(blob => blob.json()).then (json=> {\r\n          this.setState({\r\n            activeQuotes: json.quotes\r\n          })\r\n        })\r\n    }\r\n    addSymbol(symbol) {\r\n        const endpoint = `/api/active/add/${symbol}`\r\n        const promise = apiCall(endpoint,'get')\r\n        promise.then(blob => blob.json()).then(json => {\r\n          if (json.error.length > 0) {\r\n            alert(json.error)\r\n          } else {\r\n            this.setState({activeTickers: json.symbols})\r\n          }\r\n        })\r\n      }\r\n      delSymbol=(symbol) =>{\r\n        console.log(\"QUOTESdeleting\",symbol)\r\n        const endpoint = `/api/active/delete/${symbol}`\r\n        const promise = apiCall(endpoint,'get')\r\n        promise.then(blob => blob.json()).then(json => {\r\n        this.setState({activeTickers: json.symbols})\r\n          })\r\n      }\r\n    \r\n    componentDidUpdate(prevState) {\r\n      console.log(\"componentDID running\")\r\n        if(!this.state.activeQuotes && this.state.activeTickers) {\r\n          this.getQuotes(this.state.activeTickers)\r\n        }\r\n    }\r\n    \r\n    render() {\r\nconsole.log(\"tickers====\", this.state.activeTickers)\r\n\r\n        \r\n        let dummydata = [\r\n            {\r\n            \"symbol\": \"AAPL\",\r\n            \"latestPrice\": 201.24,\r\n            \"marketCap\": 925921339200,\r\n            \"avgTotalVolume\": 24728097,\r\n            \"peRatio\": 16.78,\r\n            \"open\": 199.05,\r\n            \"close\": 201.24,\r\n            \"low\": 198.81,\r\n            \"high\": 201.51,\r\n            \"week52Low\": 142,\r\n            \"week52High\": 233.47,\r\n            \"change\": 1.22,\r\n            \"changePercent\": 0.0061,\r\n            \"ytdChange\": 0.272691\r\n            },\r\n            {\r\n              \"symbol\": \"TSLA\",\r\n              \"latestPrice\": 199,\r\n              \"marketCap\": 925921339199,\r\n              \"avgTotalVolume\": 24728097,\r\n              \"peRatio\": 16.78,\r\n              \"open\": 199.05,\r\n              \"close\": 201.24,\r\n              \"low\": 198.81,\r\n              \"high\": 201.51,\r\n              \"week52Low\": 142,\r\n              \"week52High\": 233.47,\r\n              \"change\": 1.22,\r\n              \"changePercent\": 0.0061,\r\n              \"ytdChange\": 0.272691\r\n              }\r\n          ]\r\n\r\n          let output = (<div></div>)\r\n          if(this.state.activeQuotes) {\r\n            output=(\r\n            <QuoteSheet\r\n            data={dummydata}\r\n            addSymbol={this.addSymbol}\r\n            delSymbol={this.delSymbol} \r\n            activeTickers={this.state.activeTickers}\r\n            activeQuotes={this.state.activeQuotes}\r\n          />\r\n            )\r\n          } else {\r\n            output= (\r\n            <div></div>\r\n            )\r\n          }\r\n        return (\r\n            <div>\r\n                {output}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}